"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils = __importStar(require("./utils"));
// boost/numeric/interval_lib/compare/certain package on boost
/**
 * @mixin relational
 */
/**
 * Checks if the intervals `x`, `y` are equal, they're equal when
 * `x.lo === y.lo` and `x.hi === y.hi`, a corner case handled is when `x` and
 * `y` are both empty intervals
 *
 * @example
 * ```typescript
 * Interval.equal(
 *   Interval(2, 3),
 *   Interval(2, 3)
 * ) // true
 * ```
 *
 * @example
 * ```typescript
 * Interval.equal(
 *   Interval.EMPTY,
 *   Interval.EMPTY
 * ) // true
 * ```
 *
 * @param {Interval} x
 * @param {Interval} y
 * @returns {boolean}
 */
function equal(x, y) {
    if (utils.isEmpty(x)) {
        return utils.isEmpty(y);
    }
    return !utils.isEmpty(y) && x.lo === y.lo && x.hi === y.hi;
}
exports.equal = equal;
// <debug>
var EPS = 1e-7;
function assert(a, message) {
    /* istanbul ignore next */
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    if (!a) {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        throw new Error(message || 'assertion failed');
    }
}
function assertEps(a, b) {
    if (!isFinite(a)) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        return assert(a === b, "[Infinity] expected " + a + " to be " + b);
    }
    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
    assert(Math.abs(a - b) < EPS, "expected " + a + " to be close to " + b);
}
function almostEqual(x, y) {
    x = Array.isArray(x) ? x : x.toArray();
    y = Array.isArray(y) ? y : y.toArray();
    assertEps(x[0], y[0]);
    assertEps(x[1], y[1]);
}
exports.almostEqual = almostEqual;
function assertIncludes(x, y) {
    // checks that `y` is included in `x` with the bounds close to `x`
    almostEqual(x, y);
    x = Array.isArray(x) ? x : x.toArray();
    y = Array.isArray(y) ? y : y.toArray();
    assert(x[0] <= y[0], x[0] + " should be less/equal than " + y[0]);
    assert(y[1] <= x[1], y[1] + " should be less/equal than " + x[1]);
}
exports.assertIncludes = assertIncludes;
// </debug>
/**
 * Checks if the intervals `x`, `y` are not equal i.e. when the intervals don't
 * share any value
 *
 * @example
 * ```typescript
 * Interval.notEqual(
 *   Interval(2, 3),
 *   Interval(4, 5)
 * ) // true
 * ```
 *
 * @example
 * ```typescript
 * Interval.notEqual(
 *   Interval(2, 3),
 *   Interval(3, 5)
 * ) // false
 * ```
 *
 * @example
 * ```typescript
 * Interval.notEqual(
 *   Interval(2, 4),
 *   Interval(3, 5)
 * ) // false
 * ```
 *
 * @param {Interval} x
 * @param {Interval} y
 * @returns {boolean}
 */
function notEqual(x, y) {
    if (utils.isEmpty(x)) {
        return !utils.isEmpty(y);
    }
    return utils.isEmpty(y) || x.hi < y.lo || x.lo > y.hi;
}
exports.notEqual = notEqual;
/**
 * Checks if the interval `x` is less than `y` i.e. if all the values of `x`
 * are lower than the left endpoint of `y`
 *
 * @example
 * ```typescript
 * Interval.lessThan(
 *   Interval(2, 3),
 *   Interval(4, 5)
 * ) // true
 * ```
 *
 * @example
 * ```typescript
 * Interval.lessThan(
 *   Interval(4, 5),
 *   Interval(2, 3)
 * ) // false
 * ```
 *
 * @param {Interval} x
 * @param {Interval} y
 * @return {boolean}
 */
function lessThan(x, y) {
    if (utils.isEmpty(x) || utils.isEmpty(y)) {
        return false;
    }
    return x.hi < y.lo;
}
exports.lessThan = lessThan;
/**
 * Alias for {@link lessThan}
 * @function
 */
exports.lt = lessThan;
/**
 * Checks if the interval `x` is greater than `y` i.e. if all the values of `x`
 * are greater than the right endpoint of `y`
 *
 * @example
 * ```typescript
 * Interval.greaterThan(
 *   Interval(2, 3),
 *   Interval(4, 5)
 * ) // false
 * ```
 *
 * @example
 * ```typescript
 * Interval.greaterThan(
 *   Interval(4, 5),
 *   Interval(2, 3)
 * ) // true
 * ```
 *
 * @param {Interval} x
 * @param {Interval} y
 * @return {boolean}
 */
function greaterThan(x, y) {
    if (utils.isEmpty(x) || utils.isEmpty(y)) {
        return false;
    }
    return x.lo > y.hi;
}
exports.greaterThan = greaterThan;
/**
 * Alias for {@link greaterThan}
 * @function
 */
exports.gt = greaterThan;
/**
 * Checks if the interval `x` is less or equal than `y` i.e.
 * if all the values of `x` are lower or equal to the left endpoint of `y`
 *
 * @example
 * ```typescript
 * Interval.lessEqualThan(
 *   Interval(2, 3),
 *   Interval(3, 5)
 * ) // true
 * ```
 *
 * @param {Interval} x
 * @param {Interval} y
 * @return {boolean}
 */
function lessEqualThan(x, y) {
    if (utils.isEmpty(x) || utils.isEmpty(y)) {
        return false;
    }
    return x.hi <= y.lo;
}
exports.lessEqualThan = lessEqualThan;
/**
 * Alias for {@link lessEqualThan}
 * @function
 */
exports.leq = lessEqualThan;
/**
 * Checks if the interval `x` is greater or equal than `y` i.e.
 * if all the values of `x` are greater or equal to the right endpoint of `y`
 * @param {Interval} x
 * @param {Interval} y
 * @return {boolean}
 */
function greaterEqualThan(x, y) {
    if (utils.isEmpty(x) || utils.isEmpty(y)) {
        return false;
    }
    return x.lo >= y.hi;
}
exports.greaterEqualThan = greaterEqualThan;
/**
 * Alias for {@link greaterEqualThan}
 * @function
 */
exports.geq = greaterEqualThan;
//# sourceMappingURL=relational.js.map