"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var interval_1 = require("../interval");
var round_1 = __importDefault(require("../round"));
var utils = __importStar(require("./utils"));
var constants_1 = __importDefault(require("../constants"));
/**
 * Division between intervals when `y` doesn't contain zero
 * @param {Interval} x
 * @param {Interval} y
 * @returns {Interval}
 */
function nonZero(x, y) {
    var xl = x.lo;
    var xh = x.hi;
    var yl = y.lo;
    var yh = y.hi;
    var out = new interval_1.Interval();
    if (xh < 0) {
        if (yh < 0) {
            out.lo = round_1.default.divLo(xh, yl);
            out.hi = round_1.default.divHi(xl, yh);
        }
        else {
            out.lo = round_1.default.divLo(xl, yl);
            out.hi = round_1.default.divHi(xh, yh);
        }
    }
    else if (xl < 0) {
        if (yh < 0) {
            out.lo = round_1.default.divLo(xh, yh);
            out.hi = round_1.default.divHi(xl, yh);
        }
        else {
            out.lo = round_1.default.divLo(xl, yl);
            out.hi = round_1.default.divHi(xh, yl);
        }
    }
    else {
        if (yh < 0) {
            out.lo = round_1.default.divLo(xh, yh);
            out.hi = round_1.default.divHi(xl, yl);
        }
        else {
            out.lo = round_1.default.divLo(xl, yh);
            out.hi = round_1.default.divHi(xh, yl);
        }
    }
    return out;
}
exports.nonZero = nonZero;
/**
 * Division between an interval and a positive constant
 * @param {Interval} x
 * @param {number} v
 * @returns {Interval}
 */
function positive(x, v) {
    if (x.lo === 0 && x.hi === 0) {
        return x;
    }
    if (utils.zeroIn(x)) {
        // mixed considering zero in both ends
        return constants_1.default.WHOLE;
    }
    if (x.hi < 0) {
        // negative / v
        return new interval_1.Interval(Number.NEGATIVE_INFINITY, round_1.default.divHi(x.hi, v));
    }
    else {
        // positive / v
        return new interval_1.Interval(round_1.default.divLo(x.lo, v), Number.POSITIVE_INFINITY);
    }
}
exports.positive = positive;
/**
 * Division between an interval and a negative constant
 * @param {Interval} x
 * @param {number} v
 * @returns {Interval}
 */
function negative(x, v) {
    if (x.lo === 0 && x.hi === 0) {
        return x;
    }
    if (utils.zeroIn(x)) {
        // mixed considering zero in both ends
        return constants_1.default.WHOLE;
    }
    if (x.hi < 0) {
        // negative / v
        return new interval_1.Interval(round_1.default.divLo(x.hi, v), Number.POSITIVE_INFINITY);
    }
    else {
        // positive / v
        return new interval_1.Interval(Number.NEGATIVE_INFINITY, round_1.default.divHi(x.lo, v));
    }
}
exports.negative = negative;
/**
 * Division between an interval and zero
 * @param {Interval} x
 * @returns {Interval}
 */
function zero(x) {
    if (x.lo === 0 && x.hi === 0) {
        return x;
    }
    return constants_1.default.WHOLE;
}
exports.zero = zero;
//# sourceMappingURL=division.js.map