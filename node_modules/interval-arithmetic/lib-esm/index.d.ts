import { Interval as _Interval } from './interval';
import * as relational from './operations/relational';
import * as arithmetic from './operations/arithmetic';
import * as algebra from './operations/algebra';
import * as trigonometric from './operations/trigonometric';
import * as misc from './operations/misc';
import * as utils from './operations/utils';
declare const out: typeof import("./interval")._Interval & ((lo?: number | import("./interval")._Interval, hi?: number | import("./interval")._Interval) => import("./interval")._Interval) & {
    PI_LOW: number;
    PI_HIGH: number;
    PI_HALF_LOW: number;
    PI_HALF_HIGH: number;
    PI_TWICE_LOW: number;
    PI_TWICE_HIGH: number;
    readonly PI: import("./interval")._Interval;
    readonly PI_HALF: import("./interval")._Interval;
    readonly PI_TWICE: import("./interval")._Interval;
    readonly ZERO: import("./interval")._Interval;
    readonly ONE: import("./interval")._Interval;
    readonly WHOLE: import("./interval")._Interval;
    readonly EMPTY: import("./interval")._Interval;
} & {
    safePrev: (v: number) => number;
    safeNext: (v: number) => number;
    prev(x: number): number;
    next(x: number): number;
    addLo(x: number, y: number): number;
    addHi(x: number, y: number): number;
    subLo(x: number, y: number): number;
    subHi(x: number, y: number): number;
    mulLo(x: number, y: number): number;
    mulHi(x: number, y: number): number;
    divLo(x: number, y: number): number;
    divHi(x: number, y: number): number;
    intLo(x: number): number;
    intHi(x: number): number;
    logLo(x: number): number;
    logHi(x: number): number;
    expLo(x: number): number;
    expHi(x: number): number;
    sinLo(x: number): number;
    sinHi(x: number): number;
    cosLo(x: number): number;
    cosHi(x: number): number;
    tanLo(x: number): number;
    tanHi(x: number): number;
    asinLo(x: number): number;
    asinHi(x: number): number;
    acosLo(x: number): number;
    acosHi(x: number): number;
    atanLo(x: number): number;
    atanHi(x: number): number;
    sinhLo(x: number): number;
    sinhHi(x: number): number;
    coshLo(x: number): number;
    coshHi(x: number): number;
    tanhLo(x: number): number;
    tanhHi(x: number): number;
    powLo(x: number, power: number): number;
    powHi(x: number, power: number): number;
    sqrtLo(x: number): number;
    sqrtHi(x: number): number;
    disable(): void;
    enable(): void;
} & typeof misc & typeof utils & typeof relational & typeof arithmetic & typeof algebra & typeof trigonometric & {
    round: {
        safePrev: (v: number) => number;
        safeNext: (v: number) => number;
        prev(x: number): number;
        next(x: number): number;
        addLo(x: number, y: number): number;
        addHi(x: number, y: number): number;
        subLo(x: number, y: number): number;
        subHi(x: number, y: number): number;
        mulLo(x: number, y: number): number;
        mulHi(x: number, y: number): number;
        divLo(x: number, y: number): number;
        divHi(x: number, y: number): number;
        intLo(x: number): number;
        intHi(x: number): number;
        logLo(x: number): number;
        logHi(x: number): number;
        expLo(x: number): number;
        expHi(x: number): number;
        sinLo(x: number): number;
        sinHi(x: number): number;
        cosLo(x: number): number;
        cosHi(x: number): number;
        tanLo(x: number): number;
        tanHi(x: number): number;
        asinLo(x: number): number;
        asinHi(x: number): number;
        acosLo(x: number): number;
        acosHi(x: number): number;
        atanLo(x: number): number;
        atanHi(x: number): number;
        sinhLo(x: number): number;
        sinhHi(x: number): number;
        coshLo(x: number): number;
        coshHi(x: number): number;
        tanhLo(x: number): number;
        tanhHi(x: number): number;
        powLo(x: number, power: number): number;
        powHi(x: number, power: number): number;
        sqrtLo(x: number): number;
        sqrtHi(x: number): number;
        disable(): void;
        enable(): void;
    };
};
export default out;
export { _Interval as Interval };
export * from './operations/relational';
export * from './operations/arithmetic';
export * from './operations/algebra';
export * from './operations/trigonometric';
export * from './operations/misc';
export * from './operations/utils';
export * from './round';
